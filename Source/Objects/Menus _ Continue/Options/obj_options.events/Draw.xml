<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Draw option pages.
draw_set_font(global.main_font);
draw_set_halign(fa_center);
draw_set_color(c_yellow)
draw_text(global.screen_width / 2, 16, "----------------#- SETTINGS -");
draw_text(global.screen_width / 2, global.screen_height - 32, "----------------#" + string(option_description));
draw_set_color(c_white);

if (option_bind == 0)
{
    // Change option.
    if (keyboard_check_pressed(global.key_down) &amp;&amp; option_ended != 1)
    {
        audio_play_sound(SFX._general_switch, global.sfx_volume, 1, 0, 0);
        if (option_selected &lt; 5)
        {
            option_selected += 1;
        }
        else
        {
            option_selected = 0;
        }
    }

    if (keyboard_check_pressed(global.key_up) &amp;&amp; option_ended != 1)
    {
        audio_play_sound(SFX._general_switch, global.sfx_volume, 1, 0, 0);
        if (option_selected &gt; 0)
        {
            option_selected -= 1;
        }
        else
        {
            option_selected = 5;
        }
    }

    // Change display resolution.
    if (option_selected == 0)
    {
        option_description = "- Change the Display Resolution -";
        draw_set_color(c_yellow);

        if (keyboard_check_pressed(global.key_left) &amp;&amp; option_ended != 1)
        {
            audio_play_sound(SFX._general_switch, global.sfx_volume, 1, 0, 0);
            if (global.screen_scale &gt; 1)
            {
                global.screen_scale -= 1;
            }
            else
            {
                global.screen_scale = 4;
            }

            // Set screen resolution.
            window_resize();
        }
        if (keyboard_check_pressed(global.key_right) &amp;&amp; option_ended != 1)
        {
            audio_play_sound(SFX._general_switch, global.sfx_volume, 1, 0, 0);
            if (global.screen_scale &lt; 4)
            {
                global.screen_scale += 1;
            }
            else
            {
                global.screen_scale = 1;
            }

            // Set screen resolution.
            window_resize();
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw display option sub-heading.
    draw_text(global.screen_width / 2, 48, "DISPLAY RESOLUTION - [" + string(global.screen_width * global.screen_scale) + "x" + string(global.screen_height * global.screen_scale) + "]");

    // Change music volume.
    if (option_selected == 1)
    {
        option_description = "- Change the Volume of Background Music -";
        draw_set_color(c_yellow);

        if (keyboard_check_pressed(global.key_left) &amp;&amp; option_ended != 1)
        {
            audio_play_sound(SFX._general_switch, global.sfx_volume, 1, 0, 0);
            if (global.bgm_volume &gt; 0)
            {
                global.bgm_volume -= 0.01;
            }
            else
            {
                global.bgm_volume = 0;
            }
        }
        if (keyboard_check_pressed(global.key_right) &amp;&amp; option_ended != 1)
        {
            audio_play_sound(SFX._general_switch, global.sfx_volume, 1, 0, 0);
            if (global.bgm_volume &lt; 1)
            {
                global.bgm_volume += 0.01;
            }
            else
            {
                global.bgm_volume = 1;
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw music volume option sub-heading.
    draw_text(global.screen_width / 2, 64, "BGM VOLUME - " + string(round(global.bgm_volume * 100)) + "%");

    // Change sound volume.
    if (option_selected == 2)
    {
        option_description = "- Change the Volume of Sound Effects -";
        draw_set_color(c_yellow);

        if (keyboard_check_pressed(global.key_left) &amp;&amp; option_ended != 1)
        {
            audio_play_sound(SFX._general_switch, global.sfx_volume, 1, 0, 0);
            if (global.sfx_volume &gt; 0)
            {
                global.sfx_volume -= 0.01;
            }
            else
            {
                global.sfx_volume = 0;
            }
        }
        if (keyboard_check_pressed(global.key_right) &amp;&amp; option_ended != 1)
        {
            audio_play_sound(SFX._general_switch, global.sfx_volume, 1, 0, 0);
            if (global.sfx_volume &lt; 1)
            {
                global.sfx_volume += 0.01;
            }
            else
            {
                global.sfx_volume = 1;
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw sound volume option sub-heading.
    draw_text(global.screen_width / 2, 80, "SFX VOLUME - " + string(round(global.sfx_volume * 100)) + "%");

    // Change keyboard bindings.
    if (option_selected == 3)
    {
        option_description = "- Change the Keyboard bindings -";
        draw_set_color(c_yellow);

        if (keyboard_check_pressed(global.key_action) &amp;&amp; option_ended != 1)
        {
            option_delay = 30;
            option_bind  = 1;
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw keyboard binding option sub-heading.
    draw_text(global.screen_width / 2, 96, "KEYBOARD BINDINGS");

    // Change gamepad bindings.
    if (option_selected == 4)
    {
        option_description = "- Change the Gamepad bindings -";
        if (obj_gamepad_controller.gmp_check)
        {
            draw_set_color(c_yellow);
            if (keyboard_check_pressed(global.key_action) &amp;&amp; option_ended != 1)
            {
                option_delay = 30;
                option_bind  = 2;
            }
        }
        else
        {
            draw_set_color(c_red);
            if (keyboard_check_pressed(global.key_action) &amp;&amp; option_ended != 1)
            {
                audio_play_sound(SFX._general_error, global.sfx_volume, 1, 0, 0);
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw gamepad binding option sub-heading.
    draw_text(global.screen_width / 2, 112, "GAMEPAD BINDINGS");

    // Title screen option.
    if (option_selected == 5)
    {
        option_description = "- Return to the Title Screen -";
        draw_set_color(c_yellow);
        if (keyboard_check_pressed(global.key_action) &amp;&amp; option_ended != 1)
        {
            if (!instance_exists(obj_fade_to_value))
            {
                option_ended = 1;
                with (instance_create(0, 0, obj_fade_to_value))
                {
                    value = rm_title;
                }
                save_global_create();
            }
        }
    }
    else
    {
        draw_set_color(c_white);
    }

    // Draw title screen option sub-heading.
    draw_text(global.screen_width / 2, global.screen_height - 48, "EXIT");

}

if (option_bind &gt; 0)
{
    draw_text(global.screen_width / 2, global.screen_height / 2, "PRESS ANY KEY FOR: " + string(bind_key));
}

// Reset drawing properties.
draw_set_color(c_white);
draw_set_halign(fa_left);
</argument>
      </arguments>
    </action>
  </actions>
</event>
