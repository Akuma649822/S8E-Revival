<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Draw HUD.

// Draw HUD Parts:
draw_sprite(spr_hud, 0, view_xview + 16, view_yview + 9);
if (time_visibility)
{
    draw_sprite(spr_hud, 1, view_xview + 16, view_yview + 25);
    if (global.game_time &lt; 600000)
    {
        draw_sprite(spr_time_seperator, 0, view_xview + 66, view_yview + 25);
    }
    else draw_sprite(spr_time_seperator, 0, view_xview + 74, view_yview + 25);
}
if (ring_visibility)
{
    draw_sprite(spr_hud, 2, view_xview + 16, view_yview + 41);
}

// HUD Parts visibility.
if (((global.game_time div 8) mod 2 &amp;&amp; global.game_time &gt; 540000) || !global.add_time || global.game_time &lt;= 540000 || global.game_time &gt;= 600000)
{
    time_visibility = true;
}
else time_visibility = false;


if ((global.game_time div 8) mod 2 &amp;&amp; global.player_rings == 0 || !global.add_time || global.player_rings &gt; 0 || global.game_time &gt;= 600000)
{
    ring_visibility = true;
}
else ring_visibility = false;

// Set font.
draw_set_font(global.hud_font);
draw_set_color(c_white);

// Score text:
draw_set_halign(fa_right);
draw_text(view_xview + 111, view_yview + 9, global.player_score);

// Time:
draw_set_halign(fa_left);
if (time_visibility)
{
    draw_text(view_xview + 55, view_yview + 25, string(floor(global.game_time / 60000)) + " " + string_place_number(floor(global.game_time / 1000) mod 60, 2, 0));
}

// Rings:
draw_set_halign(fa_right);
draw_text(view_xview + 87, view_yview + 41, global.player_rings);
draw_set_halign(fa_left);

// Lives:
draw_set_halign(fa_right);
draw_set_font(global.lives_font);
draw_sprite(spr_hud_lives, obj_player.player_index - 1, view_xview + 16, view_yview + view_hview - 24)
draw_text(view_xview + 64, view_yview + view_hview - 15, global.player_lives);
draw_set_font(global.hud_font);
draw_set_halign(fa_left);

// Powerup bar.
if (instance_exists(obj_player))
{
    // Shift invincibility bar:
    if (obj_player.invincibility == 2)
    {
        if (powerup_bar_x[0] &lt; 16)
        {
            powerup_bar_x[0] += floor(16 - powerup_bar_x[0]) * 0.10;
        }
    }
    else
    {
        if (powerup_bar_x[0] &gt; -53)
        {
            powerup_bar_x[0] += floor(-53 - powerup_bar_x[0]) * 0.15;
        }
    }

    // Shift speedshoe bar.
    if (obj_player.speedshoe)
    {
        if (powerup_bar_x[1] &lt; 16)
        {
            powerup_bar_x[1] += floor(16 - powerup_bar_x[1]) * 0.10;
        }
    }
    else
    {
        if (powerup_bar_x[1] &gt; -53)
        {
            powerup_bar_x[1] += floor(-53 - powerup_bar_x[1]) * 0.15;
        }
    }

    // Shift speedshoe bar down.
    if (powerup_bar_x[0] &gt; -53 &amp;&amp; obj_player.invincibility == 2)
    {
        powerup_bar_y[1] += floor(75 - powerup_bar_y[1]) * 0.25;
    }
    else if (obj_player.invincibility != 2 &amp;&amp; powerup_bar_y[1] != 57)
    {
        powerup_bar_y[1] += floor(57 - powerup_bar_y[1]) * 0.15;
    }

    if (powerup_bar_y[1] &lt;= 57)
    {
        powerup_bar_y[1] = 57;
    }

    // Draw invincibility bar meter:
    draw_set_color(c_blue);
    draw_rectangle(floor(view_xview + powerup_bar_x[0] + 20), floor(view_yview + powerup_bar_y[0] + 1), floor(view_xview + powerup_bar_x[0] + 20) + (obj_player.invincibility_timer / 900 * (32)), floor((view_yview + powerup_bar_y[0] + 1) + 16), false);

    // Draw speedshoe bar meter:
    draw_set_color(c_red);
    draw_rectangle(floor(view_xview + powerup_bar_x[1] + 20), floor(view_yview + powerup_bar_y[1] + 1), floor(view_xview + powerup_bar_x[1] + 20) + (obj_player.speedshoe_timer / 900 * (32)), floor((view_yview + powerup_bar_y[1] + 1) + 16), false);
    draw_set_color(c_white);

    // Draw powerup bars:
    draw_sprite(spr_hud_powerup_bar, 0, floor(view_xview + powerup_bar_x[0]), floor(view_yview + powerup_bar_y[0]));
    draw_sprite(spr_hud_powerup_bar, 1, floor(view_xview + powerup_bar_x[1]), floor(view_yview + powerup_bar_y[1]));
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
