<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="2">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Keep within boundaries.
if (x &lt;= (camera.limit_left + sprite_get_width(MASK_MAIN) / 2) &amp;&amp; x_speed &lt; 0)
{
    x_speed = 0;
    x       = camera.limit_left + sprite_get_width(MASK_MAIN) / 2;
    if (ground)
    {
        animation = "IDLE";
    }
}
else if (x &gt;= (camera.limit_right - sprite_get_width(MASK_MAIN) / 2) &amp;&amp; x_speed &gt; 0)
{
    x_speed = 0;
    x       = camera.limit_right - sprite_get_width(MASK_MAIN) / 2;
    if (ground)
    {
        animation = "IDLE";
    }
}
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Platform reset.
// In order to prevent the player from bouncing off or losing collision on platform, wait at least 30 frames before reseting the check.
if ((!ground || !place_meeting(x, y, par_platform)) &amp;&amp; platform_check)
{
    if (platform_frames &gt; 0)
    {
        platform_frames -= 1;
    }
    else
    {
        platform_check  = false;
        platform_frames = 30;
    }
}
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Animations.

// Exit if not initialized.
if (!initialized) exit;

// Apply correct tail parts.
if (player_index == CHAR_TAILS)
{
    animation_tail_setup();
}

// Frame counts:
switch (animation)
{
    case "IDLE":
    {
        if (animation_frame_count &lt; 288)
        {
            animation_frame_count += 1;
        }
        break;
    }
    case "BORED_1":
    case "BORED_2":
    {
        animation_frame_count = 288;
        break;
    }
    case "SKID":
    {
        animation_frame_count += 1;
        break;
    }
    case "SKID_TURN":
    {
        animation_frame_count += 1;
        break;
    }
    case "SLIDE":
    {
        animation_frame_count += 1;
        break;
    }
    default:
    {
        animation_frame_count = 0;
        break;
    }
}

// Check states to apply animations:
if (ground)
{
    if (state == STATE_DEFAULT)
    {
        // Idle:
        if (x_speed == 0 &amp;&amp; animation_frame_count != 288 &amp;&amp; animation != "IDLE")
        {
            animation = "IDLE";
        }
        else if (x_speed == 0 &amp;&amp; animation_frame_count &gt;= 288 &amp;&amp; animation != "BORED_1" &amp;&amp; animation != "BORED_2")
        {
            animation = "BORED_1";
        }

        // Walking:
        if (x_speed != 0 &amp;&amp; abs(x_speed) &lt; 6 &amp;&amp; animation != "WALK")
        {
            animation = "WALK";
        }

        // Run:
        if (abs(x_speed) &gt;= 6 &amp;&amp; (animation != "RUN" || animation != "PEELOUT"))
        {
            if (peelout_flag == 0)
            {
                animation = "RUN";
            }
            else if (peelout_flag == 1)
            {
                if (abs(x_speed) &gt; 8)
                {
                    animation = "PEELOUT";
                }
                else if (abs(x_speed) &lt; 8)
                {
                    peelout_flag = 0;
                }
            }
        }
    }

    // Looking up:
    if (state == STATE_LOOKUP &amp;&amp; animation != "LOOK_UP")
    {
        animation = "LOOK_UP";
    }

    // Crouch:
    if (state == STATE_CROUCH &amp;&amp; animation != "CROUCH")
    {
        animation = "CROUCH";
    }

    // Spindash:
    if (state == STATE_SPINDASH &amp;&amp; animation != "SPINDASH")
    {
        animation = "SPINDASH";
    }

    // Rolling:
    if (state == STATE_ROLL &amp;&amp; animation != "ROLL")
    {
        animation = "ROLL";
    }

    // Peelout:
    if (state == STATE_PEELOUT)
    {
        if (peelout_timer &lt; 16)
        {
            animation = "WALK";
        }
        else if (peelout_timer &gt;= 16 &amp;&amp; peelout_timer &lt; 32)
        {
            animation = "RUN";
        }
        else if (peelout_timer &gt;= 32)
        {
            animation = "PEELOUT";
        }
    }

    // Push:
    if (state == STATE_PUSH &amp;&amp; animation != "PUSH")
    {
        animation = "PUSH";
    }

    // Slide:
    if (state == STATE_SLIDE &amp;&amp; animation != "SLIDE")
    {
        animation = "SLIDE";
    }
}
else
{
    // Jumping:
    if ((state == STATE_JUMP || state == STATE_ROLL) &amp;&amp; animation != "ROLL")
    {
        animation = "ROLL";
    }

    // Dropdash.
    if (dropdash_flag == 2)
    {
        animation = "DROPDASH";
    }

    // Spring:
    if (state == STATE_SPRING &amp;&amp; y_speed &lt; 0 &amp;&amp; animation != "SPRING")
    {
        animation = "SPRING";
    }
    if (state == STATE_SPRING &amp;&amp; y_speed &gt; 0 &amp;&amp; animation != "WALK")
    {
        animation = "WALK";
    }
    if (state != STATE_SPRING &amp;&amp; y_speed &gt; 0 &amp;&amp; animation == "SPRING")
    {
        animation = "WALK";
    }

    // Hurt:
    if (state == STATE_HURT &amp;&amp; animation != "HURT")
    {
        animation = "HURT";
    }

    // Breath:
    if (state == STATE_BREATH &amp;&amp; animation != "BREATHE")
    {
        animation = "BREATHE";
    }

    // Flying:
    if (state == STATE_FLY &amp;&amp; physic_mode == 0 &amp;&amp; animation != "FLY")
    {
        animation = "FLY";
    }

    // Swimming:
    if (state == STATE_FLY &amp;&amp; physic_mode == 1 &amp;&amp; animation != "SWIM")
    {
        animation = "SWIM";
    }

    // Flying exhausted:
    if (state == STATE_FLYDROP &amp;&amp; physic_mode == 0 &amp;&amp; animation != "FLY_DROP")
    {
        animation = "FLY_DROP";
    }

    // Swimming exhausted:
    if (state == STATE_FLYDROP &amp;&amp; physic_mode == 1 &amp;&amp; animation != "SWIM_DROP")
    {
        animation = "SWIM_DROP";
    }

    // Glide:
    if (state == STATE_GLIDE &amp;&amp; animation != "GLIDE")
    {
        animation = "GLIDE";
    }

    // Glide drop:
    if (state == STATE_GLIDE_DROP &amp;&amp; animation != "GLIDE_DROP")
    {
        animation = "GLIDE_DROP";
    }

    // Climb:
    if (state == STATE_CLIMB &amp;&amp; !is_ledge_grabbing &amp;&amp; animation != "CLIMB")
    {
        animation = "CLIMB";
    }

    // Ledge climb:
    if (state == STATE_CLIMB &amp;&amp; is_ledge_grabbing &amp;&amp; animation != "CLIMB_LEDGE")
    {
        animation = "CLIMB_LEDGE";
    }

    // Slide:
    if (state == STATE_SLIDE &amp;&amp; animation != "SLIDE")
    {
        animation = "SLIDE";
    }

    // Homing attack.
    if (state == STATE_HOMING &amp;&amp; animation != "ROLL")
    {
        animation = "ROLL";
    }
}

// Death:
if (state == STATE_DEATH)
{
    if (!has_drowned)
    {
        animation = "DEATH";
    }
    else
    {
        animation = "DROWN";
    }
}

// Switch to skid animation while not on ground when we previously had skid.
if ((animation == "SKID" || animation == "SKID_TURN") &amp;&amp; !ground)
{
    animation = "SKID";
}

// ########################################################################################################################## //

// Modify animation speeds.

// Walking:
if (animation == "WALK" &amp;&amp; ground)
{
    if (player_index == CHAR_SONIC)
    {
        animation_speed = min(0.30, max(0.05 + abs(x_speed) / 25));
    }
    if (player_index == CHAR_TAILS)
    {
        animation_speed = min(0.25, max(0.10 + abs(x_speed) / 25));
    }
    if (player_index == CHAR_KNUCKLES)
    {
        animation_speed = min(0.25, max(0.05 + abs(x_speed) / 25));
    }
}

// Running:
if ((animation == "RUN" || animation == "PEELOUT") &amp;&amp; ground)
{
    animation_speed = 0.20 + abs(x_speed) / 25;
}

// Jumping:
if (state == STATE_JUMP)
{
    if (player_index == CHAR_SONIC || player_index == CHAR_KNUCKLES)
    {
        if (dropdash_flag &lt; 2)
        {
            animation_speed = animation_rendering_speed;
        }
    }
    if (player_index == CHAR_TAILS)
    {
        animation_speed           = 0.25;
        animation_rendering_speed = 0.25;
    }
}

// Peelout:
if (player_index == CHAR_SONIC)
{
    if (state == STATE_PEELOUT)
    {
        animation_speed = 0.20 + abs(peelout_timer) / 64;
    }
}

// Rolling:
if (state == STATE_ROLL)
{
    if (player_index == CHAR_SONIC || player_index == CHAR_KNUCKLES)
    {
        if (ground)
        {
            animation_speed           = 0.25 + abs(x_speed) / 12;
            animation_rendering_speed = animation_speed;
        }
        else
        {
            animation_speed = animation_rendering_speed;
        }
    }
    if (player_index == CHAR_TAILS)
    {
        animation_speed           = 0.25;
        animation_rendering_speed = 0.25;
    }
}

// Limit jumping/rolling animation speed:
if (animation == "ROLL")
{
    if (animation_rendering_speed &gt; 1.5)
    {
        animation_rendering_speed = 1.5;
    }
    if (animation_speed &gt; 1.5)
    {
        animation_speed = 1.5;
    }
}

// If we hit a wall, reset the animation speed.
if (!ground &amp;&amp; y_speed &gt;= 0 &amp;&amp; ((player_collision_check(COL_RIGHT, MASK_BIG, x, y, angle) &amp;&amp; input_right) || (player_collision_check(COL_LEFT, MASK_BIG, x, y, angle) &amp;&amp; input_left)))
{
    if (state == STATE_JUMP || state == STATE_ROLL)
    {
        animation_speed           = 0.25;
        animation_rendering_speed = 0.25;
    }
}

// ########################################################################################################################## //

// Setup core system:
animation_core();

// ########################################################################################################################## //

// Set animation direction:
if (state != STATE_SPINDASH &amp;&amp; state != STATE_LOOKUP &amp;&amp; state != STATE_CROUCH &amp;&amp;
    state != STATE_ROLL     &amp;&amp; state != STATE_SKID   &amp;&amp; state != STATE_JUMP   &amp;&amp;
    state != STATE_CLIMB    &amp;&amp; state != STATE_HURT   &amp;&amp; grab_moving == 0      &amp;&amp;
    state != STATE_PEELOUT)
{
    // Change direction depending on input and speed:
    if (input_left &amp;&amp; x_speed &lt;= 0)
    {
        animation_direction = -1;
    }
    if (input_right &amp;&amp; x_speed &gt;= 0)
    {
        animation_direction = 1;
    }
}

// Rolling direction:
if (state == STATE_ROLL)
{
    // Change direction depending on input and speed:
    if (x_speed &gt; 0 &amp;&amp; ground)
    {
        tails_tail_direction = 1;
    }
    if (x_speed &lt; 0 &amp;&amp; ground)
    {
        tails_tail_direction = -1;
    }
    if (x_speed &gt; 0 &amp;&amp; input_right)
    {
        animation_direction = 1;
    }
    if (x_speed &lt; 0 &amp;&amp; input_left)
    {
        animation_direction = -1;
    }
}

// Jumping direction:
if (state == STATE_JUMP &amp;&amp; !jump_lock || state == STATE_SPRING)
{
    // Change direction depending on input:
    if (input_right)
    {
        animation_direction = 1;
    }
    if (input_left)
    {
        animation_direction = -1;
    }
    if (input_left &amp;&amp; input_right)
    {
        animation_direction = animation_direction;
    }
}

// Change direction in the air:
if (!ground &amp;&amp; state == STATE_DEFAULT)
{
    // Change direction depending on input:
    if (input_right)
    {
        animation_direction = 1;
    }
    if (input_left)
    {
        animation_direction = -1;
    }
}

// ########################################################################################################################## //
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Sprite rotation.
// This is used for rotating the player's sprite.

// Exit if not initialized, death or hurt.
if (!initialized || state == STATE_DEATH || state == STATE_HURT) exit;

// Change animation angle values:
if (ground)
{
    if (player_collision_check(COL_BOTTOM_OBJECT, MASK_MAIN, x, y, angle, par_solid_no_angle) || player_collision_check(COL_BOTTOM_OBJECT, MASK_MAIN, x, y, angle, par_platform_no_angle) ||
        player_collision_check(COL_BOTTOM_OBJECT, MASK_MAIN, x, y, angle, par_layer_low_no_angle) || player_collision_check(COL_BOTTOM_OBJECT, MASK_MAIN, x, y, angle, par_layer_high_no_angle))
    {
        animation_angle_mod = 0;
    }
    else
    {
        var _angMod;
        _angMod = animation_angle_mod;

        if (angle &gt;= 0 &amp;&amp; angle &lt;= 180)
        {
            if (angle &lt; 36)
            {
                _angMod = 0;
            }
            else
            {
                _angMod = angle;
            }
        }
        if (angle &gt;= 180 &amp;&amp; angle &lt;= 360)
        {
            if (angle &gt; 360 - 36)
            {
                _angMod = 0;
            }
            else
            {
                _angMod = angle;
            }
        }

        if (abs(angle_difference(animation_angle_mod, _angMod)) &lt; 45)
        {
            animation_angle_mod = rotate_towards(_angMod, animation_angle_mod, max(4, abs(x_speed)));
        }
        else
        {
            animation_angle_mod = _angMod;
        }
    }
}
else
{
    animation_angle_mod = rotate_towards(0, animation_angle_mod, 4);
}

// Rotate:
if (global.angle_mode == 0)
{
    animation_angle  = round(animation_angle_mod / 45) * 45;
    tails_tail_angle = round(animation_angle_mod / 45) * 45;
}
else
{
    animation_angle  = animation_angle_mod;
    tails_tail_angle = animation_angle_mod;
}

// Set angle to zero and exit if we're not using a animation that can be rotated.
if (animation == "IDLE" || animation == "BORED_1" || animation == "LOOK_UP" || animation == "CROUCH" || animation == "SPINDASH" || animation == "ROLL" || animation == "PUSH" || animation == "HURT" ||
    animation == "BALANCE_1" || animation == "BALANCE_2" || animation == "FLY" || animation == "SWIM" || animation == "FLY_DROP" || animation == "SWIM_DROP" || animation == "GLIDE" ||
    animation == "GLIDE_DROP" || animation == "SLIDE" || animation == "CLIMB_LEDGE" || animation == "CLIMB")
{
    animation_angle = 0;

    // Reset tail angle if not rolling:
    if (animation != "ROLL")
    {
        tails_tail_angle = 0;
    }
}

// Set the Angle of Tails' tail.
if (state == STATE_JUMP || state == STATE_ROLL || animation == "ROLL")
{
    if (!ground)
    {
        if (global.angle_mode == 1)
        {
            tails_tail_angle = point_direction(xprevious, yprevious, x, y);
        }
        else
        {
            tails_tail_angle = round(point_direction(xprevious, yprevious, x, y) / 45) * 45;
        }
        
        if (tails_tail_direction != 1)
        {
            tails_tail_direction = 1;
        }
    }
}
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Water splash.
if (global.water_position != -1)
{
    if ((abs(y_speed) &gt;= 0)
    &amp;&amp; ((y &gt; global.water_position &amp;&amp; previous_y &lt; global.water_position)
    ^^  (y &lt; global.water_position &amp;&amp; previous_y &gt; global.water_position)))
    {
        dummy_effect_create(spr_water_splash, 0.25, x, global.water_position - 8, -999996, 0);
        audio_play_sound(SFX._general_water_splash, global.sfx_volume, 1, 0, 1);
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
