<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Draw Character.
if (!initialized) exit;

if (!debug_mode)
{
    // Draw Player:
    if (invincibility == 1 &amp;&amp; invincibility_timer &gt; 0)
    {
        if ((global.object_time div 60) mod 3)
        {
            if (tails_tail_sprite != noone)
            {
                draw_sprite_ext(tails_tail_sprite, floor(tails_tail_frame), floor(x + tails_tail_x), floor(y + tails_tail_y), tails_tail_direction, 1, tails_tail_angle, animation_color, animation_alpha);
            }
            draw_sprite_ext(sprite, floor(animation_frame), floor(x), floor(y), animation_direction, 1, animation_angle, animation_color, animation_alpha);
        }
    }
    else
    {
        if (tails_tail_sprite != noone)
        {
            draw_sprite_ext(tails_tail_sprite, floor(tails_tail_frame), floor(x + tails_tail_x), floor(y + tails_tail_y), tails_tail_direction, 1, tails_tail_angle, animation_color, animation_alpha);
        }
        draw_sprite_ext(sprite, floor(animation_frame), floor(x), floor(y), animation_direction, 1, animation_angle, animation_color, animation_alpha);
    }

    // Draw Spindash dust:
    if (state == STATE_SPINDASH)
    {
        draw_sprite_ext(spr_spindash_dust, current_time div 40, floor(x - animation_direction * 1), floor(y + 1), animation_direction, 1, 0, c_white, 1);
    }

    // Draw Shields:
    if (shield == SHIELD_FIRE)
    {
        if (shield_obj == noone)
        {
            shield_obj        = instance_create(x, y, obj_player_fire_shield);
            shield_obj.handle = id;
            audio_play_sound(SFX._shield_get_flame, global.sfx_volume, 1, 0, 0);
        }
    }
    if (shield == SHIELD_BUBBLE)
    {
        if (shield_obj == noone)
        {
            shield_obj        = instance_create(x, y, obj_player_bubble_shield);
            shield_obj.handle = id;
            audio_play_sound(SFX._shield_get_bubble, global.sfx_volume, 1, 0, 0);
        }
    }
    if (shield == SHIELD_ELECTRICITY)
    {
        if (shield_obj == noone)
        {
            shield_obj        = instance_create(x, y, obj_player_electricity_shield);
            shield_obj.handle = id;
            audio_play_sound(SFX._shield_get_electricity, global.sfx_volume, 1, 0, 0);
        }
    }
}

if (debug_mode)
{
    var dbgX, dbgY;
    dbgX = floor(x);
    dbgY = floor(y);

    draw_sprite(MASK_MAIN, 0, dbgX, dbgY);
    draw_sprite(MASK_BIG, 0, dbgX - dcos(angle) * 11, dbgY + dsin(angle) * 11);
    draw_sprite(MASK_BIG, 0, dbgX + dcos(angle) * 11, dbgY - dsin(angle) * 11);
    draw_sprite(MASK_MID, 0, dbgX - dcos(angle) * 11, dbgY + dsin(angle) * 11);
    draw_sprite(MASK_MID, 0, dbgX + dcos(angle) * 11, dbgY - dsin(angle) * 11);
    draw_sprite(MASK_MID, 0, dbgX - dsin(angle) * 11, dbgY - dcos(angle) * 11);
    draw_sprite(MASK_MID, 0, dbgX + dsin(angle) * 11, dbgY + dcos(angle) * 11);
    draw_sprite(MASK_LINES, floor(angle), dbgX, dbgY);

    // Draw Shields:
    if (shield == SHIELD_FIRE)
    {
        if (shield_obj == noone)
        {
            shield_obj        = instance_create(x, y, obj_player_fire_shield);
            shield_obj.handle = id;
            audio_play_sound(SFX._shield_get_flame, global.sfx_volume, 1, 0, 0);
        }
    }
    if (shield == SHIELD_BUBBLE)
    {
        if (shield_obj == noone)
        {
            shield_obj        = instance_create(x, y, obj_player_bubble_shield);
            shield_obj.handle = id;
            audio_play_sound(SFX._shield_get_bubble, global.sfx_volume, 1, 0, 0);
        }
    }
    if (shield == SHIELD_ELECTRICITY)
    {
        if (shield_obj == noone)
        {
            shield_obj        = instance_create(x, y, obj_player_electricity_shield);
            shield_obj.handle = id;
            audio_play_sound(SFX._shield_get_electricity, global.sfx_volume, 1, 0, 0);
        }
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
