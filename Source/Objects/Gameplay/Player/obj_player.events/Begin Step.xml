<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="1">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Receive inputs.

// Exit if not initialized or death.
if (!initialized || state == STATE_DEATH) exit;

// Key held.
input_up               = keyboard_check(global.key_up);
input_down             = keyboard_check(global.key_down);
input_right            = keyboard_check(global.key_right);
input_left             = keyboard_check(global.key_left);
input_action           = keyboard_check(global.key_action);
input_special          = keyboard_check(global.key_special);

// Key press.
input_up_pressed       = keyboard_check_pressed(global.key_up);
input_down_pressed     = keyboard_check_pressed(global.key_down);
input_right_pressed    = keyboard_check_pressed(global.key_right);
input_left_pressed     = keyboard_check_pressed(global.key_left);
input_action_pressed   = keyboard_check_pressed(global.key_action);
input_special_pressed  = keyboard_check_pressed(global.key_special);

// Key release.
input_up_released      = keyboard_check_released(global.key_up);
input_down_released    = keyboard_check_released(global.key_down);
input_right_released   = keyboard_check_released(global.key_right);
input_left_released    = keyboard_check_released(global.key_left);
input_action_released  = keyboard_check_released(global.key_action);
input_special_released = keyboard_check_released(global.key_special);

// Cancel contradictory inputs.
if (input_left &amp;&amp; input_right)
{
    input_left  = false;
    input_right = false;
}

// Input alarm.
if (input_alarm)
{
    if (input_alarm_dir == 1)
    {
        input_right = false;
    }
    if (input_alarm_dir == -1)
    {
        input_left = false;
    }
}

// Input locks (spring).
if (input_lock_l)
{
    input_left = false;
}
if (input_lock_r)
{
    input_right = false;
}
</argument>
      </arguments>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Modify physics.

// Previous Positions:
previous_x = x;
previous_y = y;

// Switch Physic Modes:
if (global.water_position != -1)
{
    if (y &lt; global.water_position)
    {
        if (physic_mode != 0)
        {
            physic_mode = 0
        }
    }
    if (y &gt; global.water_position)
    {
        if (physic_mode != 1)
        {
            physic_mode = 1;
        }
    }
}

// Get/Set physics for each character.
if (player_index == CHAR_SONIC)
{
    player_physics_sonic();
}

if (player_index == CHAR_TAILS)
{
    player_physics_tails();
}

if (player_index == CHAR_KNUCKLES)
{
    player_physics_knuckles();
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
