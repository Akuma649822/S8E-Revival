<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="CREATE" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">/// Initialize global variables, fonts and savestates.

// Fonts:
global.main_font          = font_add_sprite(font_main,           ord("!"), true,  1);
global.lives_font         = font_add_sprite(font_lives,          ord("0"), false, 0);
global.hud_font           = font_add_sprite(font_hud_numbers,    ord("0"), false, 0);
global.title_card_s3_font = font_add_sprite(font_title_card_s3,  ord("A"), true,  0);
global.title_card_s2_font = font_add_sprite(font_title_card_s2,  ord("A"), true,  0);
global.title_card_s1_font = font_add_sprite(font_title_card_s1,  ord("A"), true,  2);
global.dataselect_font    = font_add_sprite(spr_dataselect_font, ord("0"), false, 0);

// Keyboard input:
global.key_up      = vk_up;
global.key_down    = vk_down;
global.key_left    = vk_left;
global.key_right   = vk_right;
global.key_action  = ord("Z");
global.key_special = ord("X");
global.key_start   = vk_enter;

// Gamepad input:
global.gmp_enabled = false;
global.gmp_action  = -1;
global.gmp_special = -1;
global.gmp_start   = -1;

// Zone / Data related:
global.player_id        = 1;             // Player id.
global.player_rings     = 0;             // Current amount of rings.
global.player_score     = 0;             // Current score.
global.player_score_mtp = 0;             // Current score multiplier (when defeating enemies)
global.player_continues = 0;             // Current amount of continues.
global.player_lives     = 3;             // Current amount of lives.
global.player_emeralds  = 0;             // Current amount of chaos emeralds.
global.cpu_id           = 2;             // CPU id.
global.add_time         = false;         // Increases in game timers if enabled.
global.game_time        = 0;             // Main game time.
global.object_time      = 0;             // Seperate timer for objects.
global.time_over_flag   = true;          // Enables the 'time over' event.
global.player_rings_100 = 1;             // Used to properly gain 100 rings.
global.zone_id          = 0;             // ID of the current zone, used for data selects.
global.death_height     = -1;            // Position that kills the player.
global.checkpoint_x     = -1;            // Position used after respawning.
global.checkpoint_y     = -1;            // Position used after respawning.
global.checkpoint_t     = 0;             // Time used after respawning.
global.water_position   = -1;            // Position of the water surface.
global.game_completed   = false;         // Have we completed the game?
global.first_zone       = rm_playground; // The first zone in the game. See the code in the obj_dataselect_slot_* and obj_fade_newgame objects.
global.previous_room    = -1;            // Returns the previous room.

// Rendering:
global.screen_scale  = 1;   // The screen scale value.
global.screen_width  = 480; // The screen width.
global.screen_height = 270; // The screen height.
global.angle_mode    = 0;   // How to rotate the player. (0 for classic, 1 for smooth)

// Audio:
global.bgm_volume = 1; // The volume used for music.
global.sfx_volume = 1; // The volume used for sound effects.
global.ring_pan   = 1; // Used to play the ring sound.

// Create the save directory if missing.
if (!directory_exists(working_directory + "\data\save"))
{
    directory_create(working_directory + "\data\save");
}

// Load save slots:
global.save_selected = 1; // The save slot we're currently using.
for (i = 1; i &lt; 9; i += 1)
{
    var _slot;
    _slot = save_load(i);
    if (_slot)
    {
        global.save_slot_zone[i]      = global.zone_id;
        global.save_slot_character[i] = global.player_id;
        global.save_slot_cpu[i]       = global.cpu_id;
        global.save_slot_lives[i]     = global.player_lives;
        global.save_slot_continues[i] = global.player_continues;
        global.save_slot_emeralds[i]  = global.player_emeralds;
        global.save_slot_completed[i] = global.game_completed;
    }
    else
    {
        global.save_slot_zone[i]      = 0;
        global.save_slot_character[i] = 1;
        global.save_slot_cpu[i]       = 2;
        global.save_slot_lives[i]     = 3;
        global.save_slot_continues[i] = 0;
        global.save_slot_emeralds[i]  = 0;
        global.save_slot_completed[i] = 0;
    }
}

// Set each room view automatically.
for (i = 0; i &lt; 32; i += 1)
{
    if (room_exists(i))
    {
        room_set_view_enabled(i, true);
        room_set_view(i, 0, true, 0, 0, global.screen_width, global.screen_height, 0, 0, global.screen_width, global.screen_height, global.screen_width / 2, global.screen_height / 2, -1, -1, noone);
    }
}

// Screen size.
window_center();

// Randomize seed.
randomize();

// Boot variables.
s8e_index  =  1;
s8e_step   =  0;
s8e_alpha  = -1;
s8e_galpha =  0;
s8e_done   = false;

// Icon speed.
image_speed = 0;
</argument>
      </arguments>
    </action>
  </actions>
</event>
